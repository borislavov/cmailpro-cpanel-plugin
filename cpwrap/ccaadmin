#!/bin/sh
 eval 'if [ -x /usr/local/cpanel/3rdparty/bin/perl ]; then exec /usr/local/cpanel/3rdparty/bin/perl -x -- $0 ${1+"$@"}; else exec /usr/bin/perl -x $0 ${1+"$@"}; fi;'
  if 0;
#!/usr/bin/perl

# Sanatize @INC
BEGIN {
  unshift @INC, '/usr/local/cpanel';
  @INC = grep( !/(^\.|\.\.|\/\.+)/, @INC );
  @INC = grep( /^(\/usr\/lib\d*\/perl|\/usr\/local\/lib\d*\/perl|\/usr\/local\/cpanel)/, @INC );
}

use Cpanel::CachedDataStore ();
use Cpanel::DnsUtils;

my $theargs = <STDIN>;
unless ( $theargs =~ /^(\d+) ([A-Z]+)/ ) {
  print STDERR "$0 : Syntax Mismatch\n";
  exit 1;
}
chomp($theargs);

my ( $uid, $action, @args ) = split( / /, $theargs );

my %commands = (
    'UNINSTALLSRVXMPP' => sub {
	my ($domain, $zone) = @_;
	if (-f "/var/named/$zone.db") {
		open(IN, "<", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
		my $out = "";
		for my $row (<IN>) {
		    unless ($row =~ m/^_(xmpp\-(server|client)|jabber)\._tcp\.?$domain\.?\s/) {
			$out .= $row; 
		    }
		}
		close(IN);
		open(OUT, ">", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
		print OUT $out;
		close(OUT);
	    } else {
		print "No zone file for domain $domain";
		exit;
	    }
    },
    'INSTALLSRVXMPP' => sub {
	my ($domain, $zone) = @_;
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_xmpp-server._tcp.$domain", 'value'=> "0 0 5269 mail.$zone."}], [$zone] );
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_xmpp-client._tcp.$domain", 'value'=> "0 0 5222 mail.$zone."}], [$zone] );
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_jabber._tcp.$domain", 'value'=> "0 0 5269 mail.$zone."}], [$zone] );
    },
    'UNINSTALLSRVSIP' => sub {
	my ($domain, $zone) = @_;
    if (-f "/var/named/$zone.db") {
	open(IN, "<", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
	my $out = "";
	for my $row (<IN>) {
	    unless ($row =~ m/^_sip\._udp.?$domain\.?\s/) {
		$out .= $row; 
	    }
	}
	close(IN);
	open(OUT, ">", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
	print OUT $out;
	close(OUT);
    } else {
	print "No zone file for domain $domain";
	exit;
    }
    },
    'INSTALLSRVSIP' => sub {
	my ($domain, $zone) = @_;
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_sip._udp.$domain", 'value'=> "0 0 5060 mail.$zone."}], [$zone] );
    },
    'UNINSTALLSRVCALDAV' => sub {
	my ($domain, $zone) = @_;
	if (-f "/var/named/$zone.db") {
	    open(IN, "<", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
	    my $out = "";
	    for my $row (<IN>) {
		unless ($row =~ m/^_caldavs?\._tcp.?$domain\.?\s/) {
		    $out .= $row; 
		}
	    }
	    close(IN);
	    open(OUT, ">", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
	    print OUT $out;
	    close(OUT);
	} else {
	    print "No zone file for domain $domain";
	    exit;
	}
    },
    'INSTALLSRVCALDAV' => sub {
	my ($domain, $zone) = @_;
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_caldav._tcp.$domain", 'value'=> "0 0 80 mail.$zone."}], [$zone] );
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_caldavs._tcp.$domain", 'value'=> "0 0 443 mail.$zone."}], [$zone] );
    },
    'UNINSTALLSRVCARDDAV' => sub {
	my ($domain, $zone) = @_;
	if (-f "/var/named/$zone.db") {
	    open(IN, "<", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
	    my $out = "";
	    for my $row (<IN>) {
		unless ($row =~ m/^_carddavs?\._tcp.?$domain\.?\s/) {
		    $out .= $row; 
		}
	    }
	    close(IN);
	    open(OUT, ">", "/var/named/$zone.db") or die "Cannot open zone file ($!)";
	    print OUT $out;
	    close(OUT);
	} else {
	    print "No zone file for domain $domain";
	    exit;
	}
    },
    'INSTALLSRVCARDDAV' => sub {
	my ($domain, $zone) = @_;
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_carddav._tcp.$domain", 'value'=> "0 0 80 mail.$zone."}], [$zone] );
	Cpanel::DnsUtils::install_srv_records( [{'domain' => "$zone",'record' => "_carddavs._tcp.$domain", 'value'=> "0 0 443 mail.$zone."}], [$zone] );
    },
    'GETLOGIN' => sub {
	my $conf = Cpanel::CachedDataStore::fetch_ref( '/var/cpanel/communigate.yaml' ) || {};
	print $conf->{cgprohost} , "::" , $conf->{cgproport} , "::" , $conf->{cgprouser} , "::" , $conf->{cgpropass};
    },
    'READFILE' => sub {
	my ($filename) = @_;
	if ( -f $filename) {
	    open(FILE, "<", $filename) or die "Failed: $!";
	    while (<FILE>) {
		print $_;
	    }
	    close(FILE);
	}
    }
    );

# Verify that the command exists
if ( !exists $commands{$action} ) {
  print "not a valid action\n";
  exit 1;
}

# Code used to ensure that the correct user is being run.
my ( $user, $gid, $home ) = ( getpwuid( int($uid) ) )[ 0, 3, 7 ];

if ( $user eq 'root' || $user eq '' ) {
  print "Admin Binary called with invalid user\n";
  exit;
}

if ( !-e "/var/cpanel/users/$user" && $user ne 'cpanel' ) {
  print "Admin binary called with invalid user\n";
  exit;
}

# This is needed by the Cpanel::AdminBin module
print ".\n";

# Execute the action in question
$commands{$action}->(  @args );
